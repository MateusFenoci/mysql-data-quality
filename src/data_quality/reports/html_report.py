"""HTML report generator for data quality results."""

from datetime import datetime
from pathlib import Path
from typing import Optional, Any, Dict, List

from ..validators.base import ValidationResult, ValidationSeverity
from .base import ReportGenerator


class HTMLReportGenerator(ReportGenerator):
    """Generates HTML reports from validation results."""

    def generate_report(
        self,
        results: List[ValidationResult],
        table_name: str,
        metadata: Optional[Dict[str, Any]] = None,
    ) -> Path:
        """Generate HTML report from validation results."""
        summary = self._analyze_results(results)

        # Generate HTML content
        html_content = self._create_html_report(results, table_name, summary, metadata)

        # Generate filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"data_quality_report_{table_name}_{timestamp}.html"
        output_path = self.output_dir / filename

        # Write HTML report
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        return output_path

    def _create_html_report(
        self,
        results: List[ValidationResult],
        table_name: str,
        summary: Dict[str, Any],
        metadata: Optional[Dict[str, Any]] = None,
    ) -> str:
        """Create HTML report content."""
        # Group results by severity for better organization
        critical_results = [
            r for r in results if r.severity == ValidationSeverity.CRITICAL
        ]
        error_results = [r for r in results if r.severity == ValidationSeverity.ERROR]
        warning_results = [
            r for r in results if r.severity == ValidationSeverity.WARNING
        ]
        info_results = [r for r in results if r.severity == ValidationSeverity.INFO]

        html = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Data Quality Report - {table_name}</title>
            <style>
                {self._get_css_styles()}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>🔍 Data Quality Report</h1>
                    <h2>Table: {table_name}</h2>
                    <p class="timestamp">Generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
                </header>

                <section class="summary">
                    <h3>📊 Summary</h3>
                    <div class="summary-cards">
                        <div class="card">
                            <h4>Total Checks</h4>
                            <div class="metric">{summary['total_checks']}</div>
                        </div>
                        <div class="card success">
                            <h4>Passed</h4>
                            <div class="metric">{summary['passed_checks']}</div>
                        </div>
                        <div class="card error">
                            <h4>Failed</h4>
                            <div class="metric">{summary['failed_checks']}</div>
                        </div>
                        <div class="card info">
                            <h4>Success Rate</h4>
                            <div class="metric">{summary['success_rate']:.1f}%</div>
                        </div>
                    </div>
                </section>

                {self._create_validator_breakdown_section(summary)}

                {self._create_severity_breakdown_section(summary)}

                {self._create_results_section("🚨 Critical Issues", critical_results, "critical")}

                {self._create_results_section("❌ Errors", error_results, "error")}

                {self._create_results_section("⚠️ Warnings", warning_results, "warning")}

                {self._create_results_section("💡 Information", info_results, "info")}

                <footer>
                    <p>Report generated by Data Quality Tool</p>
                    {f'<p>Metadata: {metadata}</p>' if metadata else ''}
                </footer>
            </div>
        </body>
        </html>
        """

        return html

    def _create_validator_breakdown_section(self, summary: Dict[str, Any]) -> str:
        """Create validator breakdown section."""
        if not summary["validator_breakdown"]:
            return ""

        rows = ""
        for validator_type, counts in summary["validator_breakdown"].items():
            success_rate = (
                (counts["passed"] / counts["total"]) * 100
                if counts["total"] > 0
                else 100
            )
            status_class = (
                "success"
                if success_rate >= 80
                else "warning"
                if success_rate >= 50
                else "error"
            )

            rows += f"""
            <tr>
                <td class="validator-name">{validator_type.title()}</td>
                <td>{counts['total']}</td>
                <td class="success">{counts['passed']}</td>
                <td class="error">{counts['failed']}</td>
                <td class="metric {status_class}">{success_rate:.1f}%</td>
            </tr>
            """

        return f"""
        <section class="validator-breakdown">
            <h3>🔧 Validator Breakdown</h3>
            <table>
                <thead>
                    <tr>
                        <th>Validator</th>
                        <th>Total</th>
                        <th>Passed</th>
                        <th>Failed</th>
                        <th>Success Rate</th>
                    </tr>
                </thead>
                <tbody>
                    {rows}
                </tbody>
            </table>
        </section>
        """

    def _create_severity_breakdown_section(self, summary: Dict[str, Any]) -> str:
        """Create severity breakdown section."""
        if not summary["severity_breakdown"]:
            return ""

        rows = ""
        for severity, counts in summary["severity_breakdown"].items():
            severity_class = severity.lower()
            if severity_class == "critical":
                severity_class = "error"

            rows += f"""
            <tr>
                <td class="severity {severity_class}">{severity}</td>
                <td>{counts['total']}</td>
                <td class="success">{counts['passed']}</td>
                <td class="error">{counts['failed']}</td>
            </tr>
            """

        return f"""
        <section class="severity-breakdown">
            <h3>⚖️ Severity Breakdown</h3>
            <table>
                <thead>
                    <tr>
                        <th>Severity</th>
                        <th>Total</th>
                        <th>Passed</th>
                        <th>Failed</th>
                    </tr>
                </thead>
                <tbody>
                    {rows}
                </tbody>
            </table>
        </section>
        """

    def _create_results_section(
        self, title: str, results: List[ValidationResult], css_class: str
    ) -> str:
        """Create results section for specific severity level."""
        if not results:
            return ""

        results_html = ""
        for result in results:
            status_icon = "✅" if result.passed else "❌"
            column_info = f" [{result.column_name}]" if result.column_name else ""

            details_html = ""
            if result.details:
                key_details = []
                if "completeness_ratio" in result.details:
                    key_details.append(
                        f"Completeness: {result.details['completeness_ratio']:.1%}"
                    )
                if "duplicate_count" in result.details:
                    key_details.append(
                        f"Duplicates: {result.details['duplicate_count']}"
                    )
                if "invalid_count" in result.details:
                    key_details.append(f"Invalid: {result.details['invalid_count']}")
                if "pattern_type" in result.details:
                    key_details.append(f"Pattern: {result.details['pattern_type']}")

                if key_details:
                    details_html = (
                        f'<div class="details">💡 {" | ".join(key_details)}</div>'
                    )

            affected_info = ""
            if result.affected_rows > 0:
                affected_info = f'<div class="affected">📈 Affected: {result.affected_rows:,} / {result.total_rows:,} rows ({result.pass_rate:.1f}% pass rate)</div>'

            results_html += f"""
            <div class="result-item">
                <div class="result-header">
                    <span class="status-icon">{status_icon}</span>
                    <span class="rule-name">{result.rule_name}</span>
                    <span class="column-info">{column_info}</span>
                </div>
                <div class="result-message">{result.message}</div>
                {affected_info}
                {details_html}
            </div>
            """

        return f"""
        <section class="results-section {css_class}">
            <h3>{title}</h3>
            <div class="results-list">
                {results_html}
            </div>
        </section>
        """

    def _get_css_styles(self) -> str:
        """Get CSS styles for the HTML report."""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            min-height: 100vh;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e1e5e9;
        }

        header h1 {
            color: #2d3748;
            margin-bottom: 10px;
        }

        header h2 {
            color: #4a5568;
            font-weight: normal;
        }

        .timestamp {
            color: #718096;
            font-size: 0.9em;
            margin-top: 10px;
        }

        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #e2e8f0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .card.success { border-left-color: #48bb78; }
        .card.error { border-left-color: #f56565; }
        .card.warning { border-left-color: #ed8936; }
        .card.info { border-left-color: #4299e1; }

        .card h4 {
            color: #4a5568;
            margin-bottom: 10px;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .metric {
            font-size: 2em;
            font-weight: bold;
            color: #2d3748;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        th {
            background-color: #f7fafc;
            font-weight: 600;
            color: #4a5568;
        }

        .validator-name {
            font-weight: 500;
            text-transform: capitalize;
        }

        .severity.critical,
        .severity.error { color: #f56565; font-weight: 500; }
        .severity.warning { color: #ed8936; font-weight: 500; }
        .severity.info { color: #4299e1; font-weight: 500; }

        .success { color: #48bb78; font-weight: 500; }
        .error { color: #f56565; font-weight: 500; }
        .warning { color: #ed8936; font-weight: 500; }

        .results-section {
            margin: 30px 0;
        }

        .results-section h3 {
            margin-bottom: 20px;
            color: #2d3748;
        }

        .results-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .result-item {
            background: white;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #e2e8f0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .results-section.critical .result-item,
        .results-section.error .result-item {
            border-left-color: #f56565;
        }

        .results-section.warning .result-item {
            border-left-color: #ed8936;
        }

        .results-section.info .result-item {
            border-left-color: #4299e1;
        }

        .result-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .status-icon {
            font-size: 1.2em;
        }

        .rule-name {
            font-weight: 600;
            color: #2d3748;
        }

        .column-info {
            color: #718096;
            font-size: 0.9em;
        }

        .result-message {
            color: #4a5568;
            margin-bottom: 10px;
        }

        .affected, .details {
            font-size: 0.9em;
            color: #718096;
            margin-top: 5px;
        }

        footer {
            text-align: center;
            margin-top: 50px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
            color: #718096;
            font-size: 0.9em;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .summary-cards {
                grid-template-columns: 1fr;
            }

            table {
                font-size: 0.9em;
            }

            th, td {
                padding: 8px;
            }
        }
        """
