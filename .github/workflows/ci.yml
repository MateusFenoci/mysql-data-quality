name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'release/**'
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.8.4'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Install pre-commit
      run: pip install pre-commit

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Run tests with coverage
      run: |
        poetry run pytest \
          --cov=src/data_quality \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=90 \
          --junit-xml=test-results.xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml

    - name: Generate Shields Data
      if: matrix.python-version == '3.11' && github.event_name == 'push'
      run: |
        # Extract coverage percentage
        COVERAGE=$(poetry run pytest --cov=src/data_quality --cov-report=term-missing | grep "TOTAL" | awk '{print $4}' | sed 's/%//')

        # Count total tests
        TOTAL_TESTS=$(poetry run pytest --collect-only -q | grep "test" | wc -l)

        # Get version
        VERSION=$(poetry version --short)

        # Create shields data
        mkdir -p .github/badges
        echo "${COVERAGE}" > .github/badges/coverage.txt
        echo "${TOTAL_TESTS}" > .github/badges/tests.txt
        echo "${VERSION}" > .github/badges/version.txt
        echo "passing" > .github/badges/build.txt

    - name: Upload Shields Data
      if: matrix.python-version == '3.11' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: shields-data
        path: .github/badges/

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Validate Git Flow branch naming
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        TARGET_BRANCH="${{ github.base_ref }}"

        echo "🔍 Source branch: $BRANCH_NAME"
        echo "🎯 Target branch: $TARGET_BRANCH"

        # Validate Git Flow patterns
        if [[ "$BRANCH_NAME" =~ ^(feature|bugfix)/.+ && "$TARGET_BRANCH" == "develop" ]]; then
          echo "✅ Valid Git Flow: $BRANCH_NAME → $TARGET_BRANCH"
        elif [[ "$BRANCH_NAME" =~ ^release/.+ && "$TARGET_BRANCH" == "main" ]]; then
          echo "✅ Valid Git Flow: $BRANCH_NAME → $TARGET_BRANCH"
        elif [[ "$BRANCH_NAME" =~ ^hotfix/.+ && "$TARGET_BRANCH" == "main" ]]; then
          echo "✅ Valid Git Flow: $BRANCH_NAME → $TARGET_BRANCH"
        else
          echo "❌ Invalid Git Flow pattern!"
          echo "📋 Valid patterns:"
          echo "   • feature/* or bugfix/* → develop"
          echo "   • release/* → main"
          echo "   • hotfix/* → main"
          echo "🚫 Current: $BRANCH_NAME → $TARGET_BRANCH"
          exit 1
        fi

  auto-version:
    name: Auto Version & Release
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      (github.ref == 'refs/heads/main' ||
       startsWith(github.ref, 'refs/heads/release/') ||
       startsWith(github.ref, 'refs/heads/hotfix/')) &&
      github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Determine version bump
      id: version-bump
      run: |
        # Get commit messages since last tag or beginning of repo
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [ -z "$LAST_TAG" ]; then
          # No tags exist, analyze all commits
          COMMITS=$(git log --oneline)
          echo "📝 No previous tags found, analyzing all commits"
        else
          # Tags exist, analyze since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          echo "📝 Analyzing commits since $LAST_TAG"
        fi

        # Determine version bump type based on commit messages
        if echo "$COMMITS" | grep -q "BREAKING CHANGE\|major:"; then
          BUMP_TYPE="major"
        elif echo "$COMMITS" | grep -q "feat:\|feature:\|minor:"; then
          BUMP_TYPE="minor"
        else
          BUMP_TYPE="patch"
        fi

        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "🔄 Version bump type: $BUMP_TYPE"

    - name: Bump version
      id: version
      run: |
        poetry version ${{ steps.version-bump.outputs.bump_type }}
        NEW_VERSION=$(poetry version --short)
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "🏷️ New version: $NEW_VERSION"

    - name: Update version in pyproject.toml
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to v${{ steps.version.outputs.version }}"

    - name: Build package
      run: poetry build

    - name: Generate changelog
      id: changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## v${{ steps.version.outputs.version }} ($(date '+%Y-%m-%d'))" >> CHANGELOG.md
        echo "" >> CHANGELOG.md

        # Get commits since last tag or all commits if no tags
        if [ -z "$LAST_TAG" ]; then
          echo "📝 Generating changelog from all commits (no previous tags)"
          git log --pretty=format:"- %s (%h)" | while read line; do
            if echo "$line" | grep -q "feat:\|feature:"; then
              echo "### ✨ Features" >> CHANGELOG.md
              echo "$line" | sed 's/feat://g' | sed 's/feature://g' >> CHANGELOG.md
            elif echo "$line" | grep -q "fix:\|bugfix:"; then
              echo "### 🐛 Bug Fixes" >> CHANGELOG.md
              echo "$line" | sed 's/fix://g' | sed 's/bugfix://g' >> CHANGELOG.md
            elif echo "$line" | grep -q "chore:"; then
              echo "### 🔧 Maintenance" >> CHANGELOG.md
              echo "$line" | sed 's/chore://g' >> CHANGELOG.md
            else
              echo "### 📝 Other Changes" >> CHANGELOG.md
              echo "$line" >> CHANGELOG.md
            fi
          done
        else
          echo "📝 Generating changelog since $LAST_TAG"
          git log ${LAST_TAG}..HEAD~1 --pretty=format:"- %s (%h)" | while read line; do
            if echo "$line" | grep -q "feat:\|feature:"; then
              echo "### ✨ Features" >> CHANGELOG.md
              echo "$line" | sed 's/feat://g' | sed 's/feature://g' >> CHANGELOG.md
            elif echo "$line" | grep -q "fix:\|bugfix:"; then
              echo "### 🐛 Bug Fixes" >> CHANGELOG.md
              echo "$line" | sed 's/fix://g' | sed 's/bugfix://g' >> CHANGELOG.md
            elif echo "$line" | grep -q "chore:"; then
              echo "### 🔧 Maintenance" >> CHANGELOG.md
              echo "$line" | sed 's/chore://g' >> CHANGELOG.md
            else
              echo "### 📝 Other Changes" >> CHANGELOG.md
              echo "$line" >> CHANGELOG.md
            fi
          done
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Push version changes
      run: |
        CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        git push origin $CURRENT_BRANCH
        git push origin v${{ steps.version.outputs.version }}

  update-readme-shields:
    name: Update README Shields
    runs-on: ubuntu-latest
    needs: [test, auto-version]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Generate dynamic shields data
      id: shields
      run: |
        # Get current metrics
        COVERAGE=$(poetry run pytest --cov=src/data_quality --cov-report=term-missing | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        TOTAL_TESTS=$(poetry run pytest --collect-only -q | grep "test" | wc -l)
        VERSION=$(poetry version --short)

        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update README shields
      run: |
        # Update shields in README.md with current data
        sed -i "s/version-[^-]*-blue/version-${{ steps.shields.outputs.version }}-blue/g" README.md
        sed -i "s/coverage-[^%]*%25-/coverage-${{ steps.shields.outputs.coverage }}%25-/g" README.md
        sed -i "s/tests-[^%]*%20passed-/tests-${{ steps.shields.outputs.tests }}%20passed-/g" README.md

    - name: Commit updated README
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update README shields with latest metrics"
          git push origin main
        fi

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Dev Environment
      run: |
        echo "🚀 Deploying to development environment..."
        echo "✅ Development deployment completed"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, auto-version]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Environment
      run: |
        echo "🚀 Deploying to production environment..."
        echo "✅ Production deployment completed"
